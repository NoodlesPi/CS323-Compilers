#include "symtab.h"

/*
 * symbol table type, binary tree impl
 */
struct symtab {
    entry entry;
    struct symtab *left, *right;
};

// ************************************************************
//    Your implementation goes here
// ************************************************************

symtab *symtab_init(){
    symtab *self = malloc(sizeof(symtab));
    memset(self, '\0', sizeof(symtab));
    self->left = NULL;
    self->right = NULL;
    return self;
}

int symtab_insert(symtab *self, char *key, VAL_T value){
    if (strcmp(self->entry.key, "") == 0) {
        entry_init(&self->entry, key, value);
        return 1;
    } else {
        symtab *cur = self;
        while (cur != NULL) {
            if (strcmp(cur->entry.key, key) < 0) {
                if (cur->left == NULL) {
                    cur->left = symtab_init();
                    entry_init(&cur->left->entry, key, value);
                    return 1;
                } else {
                    cur = cur->left;
                }
            } else if (strcmp(cur->entry.key, key) == 0) {
                return 0;
            } else {
                if (cur->right == NULL) {
                    cur->right = symtab_init();
                    entry_init(&cur->right->entry, key, value);
                    return 1;
                } else {
                    cur = cur->right;
                }
            }
        }
    }
}

VAL_T symtab_lookup(symtab *self, char *key){
    symtab *cur = self;
    while (cur != NULL) {
        if (strcmp(cur->entry.key, key) == 0) {
            return cur->entry.value;
        } else if (strcmp(cur->entry.key, key) < 0) {
            cur = cur->left;
        } else {
            cur = cur->right;
        }
    }
    return -1;
}

symtab *find_successer(symtab *self) {
    if (self->left == NULL){
	 return self;
    }
    return find_successer(self->left);	
}
symtab *find_parent(symtab *self, symtab *target) {
   if (self->left != NULL) {
	   find_parent(self->left, target);
   }
   if (self->left == target || self->right == target) {
	   return self;
   }
   if (self->right != NULL) {
	   find_parent(self->right, target);
   }

}
int symtab_remove(symtab *self, char *key){
    symtab *cur = self;
    symtab *parent = self;
    while (cur != NULL) {
        if (strcmp(cur->entry.key, key) == 0) {
            if (cur->left == NULL && cur->right == NULL) {
                if (cur == parent) {
                    entry_init(&self->left->entry, "", 0);
                } else {
                    free(cur);
                    cur = NULL;
                }
            } else if (cur->left == NULL || cur->right == NULL) {
                if (parent == cur) {
                    self = cur->left == NULL ? cur->right : cur->left;    
                } else if (parent->left == cur) {
                    parent->left = cur->right == NULL ? cur->left : cur->right;
                } else {
                    parent->right = cur->left == NULL ? cur->right : cur->left;
                }
                    free(cur);
                    cur = NULL;
            } /*else {
	            symtab *suc = find_successer(cur->right);
		        symtab *par = find_parent(self, suc);
		        if (par == cur) {
                    if (parent->left == cur) {
                        parent->left = suc;
                    } else {
                        parent->right = suc;
                    }
                    suc->left = cur->left;
                    free(cur);
                    cur = NULL;
                } else {
                    if (suc->right == NULL) {
                        if (parent->left == cur) {
                            parent->left = suc;
                        } else {
                            parent->right = suc;
                        }
                        suc->left = cur->left;
                        suc->right = cur->right;
                        par->left = NULL;
                        free(cur);
                        cur = NULL;
                    }else {
                        if (parent->left == cur) {
                            parent->left = suc;
                        } else {
                            parent->right = suc;
                        }
                        suc->left = cur->left;
                        suc->right = cur->right;
                        par->left = suc->right;
                        free(cur);
                        cur = NULL;
                    }
		        }	
            }*/
            return 1;
        } else if (strcmp(cur->entry.key, key) < 0) {
            cur = cur->left;
        } else {
            cur = cur->right;
        }
        parent = cur;
    }
    return 0;
}
